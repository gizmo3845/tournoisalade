@page "/tours"
@using TournoiSalade.Data
@using Radzen
@inject ITournament CurrentTournament
@inject DialogService DialogServices
@inject NavigationManager NavigationManager
@inject AuthenticationManagement Authentication

<PageTitle>Tours</PageTitle>

<h1>Tour @CurrentTournament.TourNumber</h1>

<RadzenButton Click=@(args => NextRound()) Text="Prochain tour" Disabled="@DisabledNextRound()" Icon="refresh" ButtonStyle="ButtonStyle.Success" />

<br />
<br />

<RadzenDataGrid AllowFiltering="false" AllowPaging="false" PageSize="100" AllowSorting="false" Data="@CurrentTournament.CurrentTour.ExcludedPlayers" TItem="Player">
    <Columns>
        <RadzenDataGridColumn TItem="Player" Title="Joueurs ne participants pas à ce tour">
            <Template Context="data">
                @data.Name
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

<br />
<br />

<RadzenDataGrid @ref="matchGrid" AllowFiltering="false" AllowPaging="false" PageSize="100" AllowSorting="false" Data="@CurrentTournament.CurrentTour.Matches" TItem="Match">
    <Columns>
        <RadzenDataGridColumn TItem="Match" Title="Team1">
            <Template Context="data">
                @data.Team1.Player1.Name - @data.Team1.Player2.Name
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Match" Title="Score Team1">
            <Template Context="data">
                <RadzenNumeric @bind-Value=@data.Team1Result TValue="int" Min="0" Max="80" Change=@OnChange />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Match" Title="Score Team2">
            <Template Context="data">
                <RadzenNumeric @bind-Value=@data.Team2Result TValue="int" Min="0" Max="80" Change=@OnChange />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Match" Title="Team2">
            <Template Context="data">
                @data.Team2.Player1.Name - @data.Team2.Player2.Name
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    RadzenDataGrid<Match> matchGrid;
    bool CloseDisabled;

    protected override async Task OnInitializedAsync()
    {
        var code = await Authentication.GetCode();
        if (code != "386392")           
        {
            NavigationManager.NavigateTo("/notfound");
        }
    }

    private async Task NewRound()
    {
        var yes = await DialogServices.Confirm("On commence un nouveau tour ?", "Nouveau tour", new ConfirmOptions() { OkButtonText = "Oui", CancelButtonText = "Non" });

        if (yes.HasValue && yes.Value)
        {
            await CurrentTournament.NextTour();
            CloseDisabled = false;
            await matchGrid.Reload();
        }
    }

    private async Task NextRound()
    {
        var yes = await DialogServices.Confirm("Prochain tour ?", "Prochain tour", new ConfirmOptions() { OkButtonText = "Oui", CancelButtonText = "Non" });

        if (yes.HasValue && yes.Value)
        {
            // Compute all player scores
            CurrentTournament.ComputePlayerPoints();
            await CurrentTournament.NextTour();
            this.StateHasChanged();
        }
    }

    bool DisabledNextRound()
    {
        return (CurrentTournament.TourNumber > 0 && !CurrentTournament.CurrentTour.AllMatchHaveResult()) || CurrentTournament.Players.Count < 4;
    }

    void OnChange()
    {
        CurrentTournament.Save();
        this.StateHasChanged();
    }
}

