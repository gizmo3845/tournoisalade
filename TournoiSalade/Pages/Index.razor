@page "/"
@using TournoiSalade.Data
@using Radzen
@inject ITournament CurrentTournament
@inject DialogService DialogServices

<PageTitle>Tournoi Salade TCL</PageTitle>

<h1>Joueurs</h1>

<RadzenCard>
    <h4 class="mb-4">Ajouter des joueurs</h4>
    <RadzenTextArea @ref="playerTextBox" Placeholder="Noms..." Rows="8" TValue="string" Change=@OnNameChange Class="w-100" />
    <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="add_circle_outline" Class="m-2" Click=@AddPlayer Text="Ajouter" />
</RadzenCard>
<br />
<RadzenDataGrid @ref="playersGrid" AllowFiltering="false" AllowPaging="false" PageSize="100" AllowSorting="false" Data="@CurrentTournament.Players" TItem="Player">
    <Columns>
        <RadzenDataGridColumn Width="50px" TItem="Player" Title="#" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
            <Template Context="data">
                @(CurrentTournament.Players.IndexOf(data) + 1)
            </Template>
        </RadzenDataGridColumn>      
        <RadzenDataGridColumn TItem="Player" Property="Name" Title="Nom" />
        <RadzenDataGridColumn Width="200px" TItem="Player" Title="Enfant">
            <Template Context="player">
                <RadzenCheckBox @bind-Value=@player.IsChild TriState="false" TValue="bool" Change=@OnChildChange/>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Width="200px" TItem="Player" Property="Name" Title="Action">
            <Template Context="player">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="danger" Class="m-2" Click=@(() => DeletePlayer(@player.Name)) Text="Supprimer" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {

    RadzenDataGrid<Player> playersGrid;
    RadzenTextArea playerTextBox;
    string newPlayerName;

    protected override void OnInitialized()
    {
        CurrentTournament.Load();
    }

    async Task DeletePlayer(string playerName)
    {
        var yes = await DialogServices.Confirm($"Supprimer le joueur {playerName} ?", "Suppression", new ConfirmOptions() { OkButtonText = "Oui", CancelButtonText = "Non" });

        if (yes.HasValue && yes.Value)
        {
            var player = CurrentTournament.Players.FirstOrDefault(p => p.Name == playerName);
            if (player != null)
                CurrentTournament.Players.Remove(player);

            await CurrentTournament.Save();
            await this.playersGrid.Reload();
        }
    }

    async Task AddPlayer()
    {
        if (String.IsNullOrEmpty(newPlayerName))
            return;

        var players = newPlayerName.Split('\n');
        List<string> existingPlayers = new();
        foreach (var playerName in players)
        {
            if (String.IsNullOrEmpty(playerName))
                continue;

            if( CurrentTournament.Players.Any(p => p.Name.ToLower() == playerName.ToLower()) )
            {
                existingPlayers.Add(playerName);
            }
            else
            {
                Player p = new Player() { Name = playerName };
                CurrentTournament.Players.Add(p);
                CurrentTournament.Players.Sort((a, b) => a.Name.CompareTo(b.Name));                
            }
        }        

        playerTextBox.Value = "";

        if(existingPlayers.Any())
        {
            await DialogServices.OpenAsync($"Joueur(s) déjà existant(s)", ds => 
        @<div><ul>@foreach(var existingPlayer in existingPlayers){<li>@existingPlayer</li>}</ul></div>
    , new DialogOptions() { CloseDialogOnOverlayClick = true });

            foreach(var existingPlayer in existingPlayers)
                playerTextBox.Value += existingPlayer + '\n';
        }

        await CurrentTournament.Save();
        await this.playersGrid.Reload();
    }

    void OnNameChange(string value)
    {
        newPlayerName = value;
    }

    void OnChildChange(bool value)
    {
        CurrentTournament.Save();
    }
}