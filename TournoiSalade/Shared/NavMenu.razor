@using TournoiSalade.Data
@inject ITournament CurrentTournament
@inject DialogService DialogServices


<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <img src="images/tcl.png" height="32" width="32" />
        <a class="navbar-brand" href="">Tournoi Salade TCL</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-person" aria-hidden="true"></span> Joueurs
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="tours">
                <span class="oi oi-reload" aria-hidden="true"></span> Tours
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="classement">
                <span class="oi oi-menu" aria-hidden="true"></span> Classement
            </NavLink>
        </div>
    </nav>

    <div class="d-grid col-10 mx-auto">
        <RadzenButton Text="Nouveau tournoi" ButtonStyle="ButtonStyle.Secondary" Click=@OnNewTournament />
    </div>

</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override void OnInitialized()
    {
    }

    public void Dispose()
    {
    }

    async Task OnNewTournament()
    {
        var yes = await DialogServices.Confirm("Créer nouveau tournoi et tout effacer (tours et joueurs) ?", "Nouveau tournoi", new ConfirmOptions() { OkButtonText = "Créer", CancelButtonText = "Annuler" });

        if (yes.HasValue && yes.Value)
        {
            await CurrentTournament.New();
            this.StateHasChanged();
        }
    }
}

